// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GaryPortalAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210107123552_InitialUserCreate")]
    partial class InitialUserCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("GaryPortalAPI.Models.Rank", b =>
                {
                    b.Property<int>("RankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("RankAccessLevel")
                        .HasColumnType("int");

                    b.Property<string>("RankName")
                        .HasColumnType("longtext");

                    b.HasKey("RankId");

                    b.ToTable("Ranks");
                });

            modelBuilder.Entity("GaryPortalAPI.Models.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("TeamAccessLevel")
                        .HasColumnType("int");

                    b.Property<string>("TeamName")
                        .HasColumnType("longtext");

                    b.HasKey("TeamId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("GaryPortalAPI.Models.User", b =>
                {
                    b.Property<string>("UserUUID")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsQueued")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserBio")
                        .HasColumnType("longtext");

                    b.Property<string>("UserFullName")
                        .HasColumnType("longtext");

                    b.Property<bool>("UserIsAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("UserIsStaff")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserProfileImageUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("UserQuote")
                        .HasColumnType("longtext");

                    b.Property<string>("UserSpanishName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserStanding")
                        .HasColumnType("longtext");

                    b.HasKey("UserUUID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GaryPortalAPI.Models.UserAuthentication", b =>
                {
                    b.Property<string>("UserUUID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserEmail")
                        .HasColumnType("longtext");

                    b.Property<bool>("UserEmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserPassHash")
                        .HasColumnType("longtext");

                    b.Property<string>("UserPassSalt")
                        .HasColumnType("longtext");

                    b.Property<string>("UserPhone")
                        .HasColumnType("longtext");

                    b.Property<bool>("UserPhoneConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("UserUUID");

                    b.ToTable("UserAuthentications");
                });

            modelBuilder.Entity("GaryPortalAPI.Models.UserPoints", b =>
                {
                    b.Property<string>("UserUUID")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AmigoPoints")
                        .HasColumnType("int");

                    b.Property<int>("BowelsRelieved")
                        .HasColumnType("int");

                    b.Property<int>("MeaningfulPrayers")
                        .HasColumnType("int");

                    b.Property<int>("PositivityPoints")
                        .HasColumnType("int");

                    b.Property<int>("Prayers")
                        .HasColumnType("int");

                    b.HasKey("UserUUID");

                    b.ToTable("UserPoints");
                });

            modelBuilder.Entity("GaryPortalAPI.Models.UserRanks", b =>
                {
                    b.Property<string>("UserUUID")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AmigoRankId")
                        .HasColumnType("int");

                    b.Property<int>("PositivtyRankId")
                        .HasColumnType("int");

                    b.HasKey("UserUUID");

                    b.HasIndex("AmigoRankId");

                    b.HasIndex("PositivtyRankId");

                    b.ToTable("UserRanks");
                });

            modelBuilder.Entity("GaryPortalAPI.Models.UserRefreshToken", b =>
                {
                    b.Property<string>("UserUUID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TokenClient")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("TokenExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("TokenIsEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("TokenIssueDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("UserUUID", "RefreshToken");

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("GaryPortalAPI.Models.UserTeam", b =>
                {
                    b.Property<string>("UserUUID")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("UserUUID");

                    b.HasIndex("TeamId");

                    b.ToTable("UserTeams");
                });

            modelBuilder.Entity("GaryPortalAPI.Models.UserAuthentication", b =>
                {
                    b.HasOne("GaryPortalAPI.Models.User", "User")
                        .WithOne("UserAuthentication")
                        .HasForeignKey("GaryPortalAPI.Models.UserAuthentication", "UserUUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GaryPortalAPI.Models.UserPoints", b =>
                {
                    b.HasOne("GaryPortalAPI.Models.User", "User")
                        .WithOne("UserPoints")
                        .HasForeignKey("GaryPortalAPI.Models.UserPoints", "UserUUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GaryPortalAPI.Models.UserRanks", b =>
                {
                    b.HasOne("GaryPortalAPI.Models.Rank", "AmigoRank")
                        .WithMany("UserAmigoRanks")
                        .HasForeignKey("AmigoRankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GaryPortalAPI.Models.Rank", "PositivityRank")
                        .WithMany("UserPositivityRanks")
                        .HasForeignKey("PositivtyRankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GaryPortalAPI.Models.User", "User")
                        .WithOne("UserRanks")
                        .HasForeignKey("GaryPortalAPI.Models.UserRanks", "UserUUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AmigoRank");

                    b.Navigation("PositivityRank");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GaryPortalAPI.Models.UserRefreshToken", b =>
                {
                    b.HasOne("GaryPortalAPI.Models.User", "User")
                        .WithMany("UserRefreshTokens")
                        .HasForeignKey("UserUUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GaryPortalAPI.Models.UserTeam", b =>
                {
                    b.HasOne("GaryPortalAPI.Models.Team", "Team")
                        .WithMany("UserTeams")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GaryPortalAPI.Models.User", "User")
                        .WithOne("UserTeam")
                        .HasForeignKey("GaryPortalAPI.Models.UserTeam", "UserUUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GaryPortalAPI.Models.Rank", b =>
                {
                    b.Navigation("UserAmigoRanks");

                    b.Navigation("UserPositivityRanks");
                });

            modelBuilder.Entity("GaryPortalAPI.Models.Team", b =>
                {
                    b.Navigation("UserTeams");
                });

            modelBuilder.Entity("GaryPortalAPI.Models.User", b =>
                {
                    b.Navigation("UserAuthentication");

                    b.Navigation("UserPoints");

                    b.Navigation("UserRanks");

                    b.Navigation("UserRefreshTokens");

                    b.Navigation("UserTeam");
                });
#pragma warning restore 612, 618
        }
    }
}
